generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(uuid())
  name          String
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  subid         String?
  password      String?
  image         String?
  sessions      Session[]

  activeParkrunClubId  Int?
  activeParkrunClub   ParkrunClub?         @relation(name: "activeParkrunClub", fields: [activeParkrunClubId], references: [id], onDelete: SetNull)

  completedParkruns      CompletedParkrun[]
  parkrunClubsOwned           ParkrunClub[] @relation(name: "ownedBy")
  memberships           ParkrunClubMembership[]

  userSettings  UserSettings?

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model UserSettings {
  id        Int @id @default(autoincrement())
  userId    String @map("user_id") @unique

  theme String @default("#4287f5")

  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("user_settings")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Parkrun {
  id              Int     @id @default(autoincrement())
  name            String
  location        String
  longitude       Float
  latitude        Float
  polygonGeometry Json

  completedParkruns      CompletedParkrun[]

  @@map("parkruns")
}

model CompletedParkrun {
  id            Int       @id @default(autoincrement())
  parkrunId    Int       @map("parkrun_id")
  userId      String       @map("user_id")
  noOfCompletions Int @map("no_of_completions") @default(1)

  parkrun      Parkrun     @relation(fields: [parkrunId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("completed_parkruns")
}

model ParkrunClub {
  id            Int       @id @default(autoincrement())
  name          String
  uniqueCode    String  @unique

  ownerId      String       @map("user_id")
  owner         User     @relation(name: "ownedBy", fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  memberships  ParkrunClubMembership[]
  usersWithActive User[] @relation(name: "activeParkrunClub")

 @@map("parkrun_clubs")
 @@unique([ownerId, name], name: "clubNamePerUserUniqueConstraint")
}

model ParkrunClubMembership {
  id            Int       @id @default(autoincrement())
  userId        String    @map("user_id")
  parkrunClubId Int       @map("parkrun_club_id")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parkrunClub         ParkrunClub     @relation(fields: [parkrunClubId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("parkrun_club_memberships")
  @@unique([userId, parkrunClubId], name: "oneMembershipPerUserPerClubUniqueConstraint")
}
