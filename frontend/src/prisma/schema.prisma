generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DB_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  theme         String?
  accounts      Account[]
  sessions      Session[]

  activeParkrunClubId  Int?
  activeParkrunClub   ParkrunClub?         @relation(name: "activeParkrunClub", fields: [activeParkrunClubId], references: [id])

  completedParkruns      CompletedParkrun[]
  parkrunClubsOwned           ParkrunClub[] @relation(name: "ownedBy")
  memberships           ParkrunClubMembership[]

  userSettings  UserSettings?

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model UserSettings {
  id        Int @id @default(autoincrement())
  userId    Int @map("user_id") @unique

  theme String?

  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("user_settings")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Parkrun {
  id              Int     @id @default(autoincrement())
  name            String
  location        String
  longitude       Float
  latitude        Float
  polygonGeometry Json

  completedParkruns      CompletedParkrun[]

  @@map("parkruns")
}

model CompletedParkrun {
  id            Int       @id @default(autoincrement())
  parkrunId    Int       @map("parkrun_id")
  userId      Int       @map("user_id")
  noOfCompletions Int @map("no_of_completions") @default(1)

  parkrun      Parkrun     @relation(fields: [parkrunId], references: [id], onDelete: NoAction)
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("completed_parkruns")
}

model ParkrunClub {
  id            Int       @id @default(autoincrement())
  name          String
  uniqueCode    String  @unique

  userId      Int       @map("user_id")

  owner         User     @relation(name: "ownedBy", fields: [userId], references: [id], onDelete: NoAction)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  membership  ParkrunClubMembership[]
  usersWithActive User[] @relation(name: "activeParkrunClub")

 @@map("parkrun_clubs")
 @@unique([userId, name], name: "clubNamePerUserUniqueConstraint")
}

model ParkrunClubMembership {
  id Int       @id @default(autoincrement())
  userId Int  @map("user_id")
  parkrunClubId Int @map("parkrun_club_id")

  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  parkrunClub         ParkrunClub     @relation(fields: [parkrunClubId], references: [id], onDelete: NoAction)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("parkrun_club_memberships")
  @@unique([userId, parkrunClubId], name: "oneMembershipPerUserPerClubUniqueConstraint")
}
